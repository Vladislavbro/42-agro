// driveUploader.js ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É "42" –Ω–∞ Google –î–∏—Å–∫

const fs = require('fs');
const { Readable } = require('stream');
const { google } = require('googleapis');
const readline = require('readline');

const CREDENTIALS_PATH = 'credentials.json';
const TOKEN_PATH = 'token.json';
// const PARENT_FOLDER_ID = '15Ka4ST-JqIhptlWHwWvknh2bGTBunYDg'; // –£–¥–∞–ª—è–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π ID

function askQuestion(query) {
  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  return new Promise(resolve => rl.question(query, answer => { rl.close(); resolve(answer); }));
}

async function authorizeGoogle() {
  const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH));
  const { client_secret, client_id, redirect_uris } = credentials.installed;
  const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);

  if (fs.existsSync(TOKEN_PATH)) {
    const token = JSON.parse(fs.readFileSync(TOKEN_PATH));
    oAuth2Client.setCredentials(token);
    return oAuth2Client;
  }

  const authUrl = oAuth2Client.generateAuthUrl({ access_type: 'offline', scope: ['https://www.googleapis.com/auth/drive.file'] });
  console.log('üîó –û—Ç–∫—Ä–æ–π —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:', authUrl);
  const code = await askQuestion('üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ');
  const { tokens } = await oAuth2Client.getToken(code);
  oAuth2Client.setCredentials(tokens);
  fs.writeFileSync(TOKEN_PATH, JSON.stringify(tokens));
  return oAuth2Client;
}

function extractFolderIdFromUrl(url) {
    // –ò—â–µ–º ID –ø–∞–ø–∫–∏ –ø–æ—Å–ª–µ /folders/
    const match = url.match(/\/folders\/([a-zA-Z0-9_-]+)/);
    if (match && match[1]) {
        return match[1];
    }
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–º–æ–∂–Ω–æ URL —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–∞–ø–∫–∏ –∏–∑ URL: ${url}. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π URL.`);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ–ª–±—ç–∫ –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É
    return null; 
}

async function uploadToDrive(filename, buffer, googleDriveFolderUrl) { // –î–æ–±–∞–≤–ª—è–µ–º URL –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
  const auth = await authorizeGoogle();
  const drive = google.drive({ version: 'v3', auth });

  // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–∞–ø–∫–∏ –∏–∑ URL
  const folderId = extractFolderIdFromUrl(googleDriveFolderUrl);

  if (!folderId) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–∞–ø–∫–∏ Google Drive –∏–∑ URL: ${googleDriveFolderUrl}`);
  }

  const fileMetadata = {
    name: filename,
    parents: [folderId] // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π ID
  };

  const media = {
    mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    body: Readable.from(buffer)
  };

  await drive.files.create({
    requestBody: fileMetadata,
    media,
    fields: 'id'
  });
}

module.exports = { uploadToDrive };